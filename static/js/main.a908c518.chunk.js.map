{"version":3,"sources":["assets/Banner-image-11.png","assets/LSK-glucose-meter-coding-logic-12.png","assets/LSK-glucose-meter-coding-logic-11.png","assets/LSK-glucose-meter-coding-logic-13.png","components/Banner/index.js","components/MainApp/ResultDisplay.js","components/MainApp/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledBanner","styled","div","BannerColor","StyledTitle","label","StyledCopyText","BannerImageContainer","BannerImage","img","Banner","src","bannerImage","Container","FirstRect","SecondRect","ThirdRect","ResultLabel","ResetButton","button","RectBackground","props","background","ResultDisplay","result","this","mainResult","onClick","handleReset","React","Component","StyleMainApp","Title","InputDiv","InputTitle","InputUnit","Input","input","Submit","MainApp","handleBlankChange","e","setState","blank","target","value","handleSampleChange","sample","handleSubmit","preventDefault","state","typhoidImg","drugImg","typhoidDrugImg","instruction","onSubmit","handelSubmit","type","onChange","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a908c518.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Banner-image-11.1c0843ec.png\";","module.exports = __webpack_public_path__ + \"static/media/LSK-glucose-meter-coding-logic-12.b056882f.png\";","module.exports = __webpack_public_path__ + \"static/media/LSK-glucose-meter-coding-logic-11.f5ff7348.png\";","module.exports = __webpack_public_path__ + \"static/media/LSK-glucose-meter-coding-logic-13.58e18922.png\";","import React from 'react';\nimport styled from 'styled-components';\n\nimport bannerImage from '../../assets/Banner-image-11.png';\n\nconst StyledBanner = styled.div`\n  width: 100%;\n  height: 25vh;\n  border-radius: 0 0 30px 30px;\n  filter: drop-shadow(0px 0px 10px rgba(0,0,0,.5));\n  position: relative;\n`;\n\nconst BannerColor = styled.div`\n  width: 100%;\n  height: 100%;\nbackground: rgb(95,207,255);\nbackground: linear-gradient(90deg, rgba(95,207,255,0.6) 0%, rgba(38,29,253,0.6) 50%, rgba(189,137,255,0.6) 100%);\n  border-radius: 0 0 30px 30px;\n`;\n\nconst StyledTitle = styled.label`\n  position: absolute;\n  left: 50%;\n  top: 60%;\n  transform: translate(-50%, -60%);\n  font-weight: bold;\n  font-size: 36px;\n  color: white;\n  filter: drop-shadow(0px 0px 10px rgba(0,0,0,.5));\n  z-index: 1;\n`;\n\nconst StyledCopyText = styled.label`\n  position: absolute;\n  left: 50px;\n  top: 20px;\n  font-size: 9px;\n  color: white;\n`;\n\nconst BannerImageContainer = styled.div`\n  position: absolute;\n  left: 45%;\n  top: 0;\n  z-index: -1;\n  height: 25vh;\n  overflow: hidden;\n`;\n\nconst BannerImage = styled.img`\n  height: 80vh;\n  top: 50%;\n  transform: translate(0, -35%);\n`;\n\nfunction Banner() {\n  return (\n    <StyledBanner>\n      <BannerColor/>\n    \t<StyledTitle>\n    \t Glucose Meter Translator\n    \t</StyledTitle>\n      <BannerImageContainer>\n        <BannerImage src={bannerImage} />\n      </BannerImageContainer>\n      <StyledCopyText>\n        BioHues Digital Â© 2020 Pardee Lab. All rights reserved.\n      </StyledCopyText>\n    </StyledBanner>\n  );\n}\n\nexport default Banner;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  width: 70vw;\n  height: 100%;\n  position: relative;\n  margin-left: 10vw;\n`;\n\nconst FirstRect = styled.div`\n  position: absolute;\n  width: 50vw;\n  max-width: 550px;\n  height: 50vh;\n  max-height: 350px;\n  border-radius: 20px;\n  top: 50px;\n  left: 50%;\n  transform: translate(-50%);\n  z-index: 2;\n`;\n\nconst SecondRect = styled.div`\n  position: absolute;\n  width: 55vw;\n  max-width: 600px;\n  height: 45vh;\n  max-height: 300px;\n  border-radius: 20px;\n  background-color: #B3B3B3;\n  top: calc(50px + 2.5vh);\n  left: 50%;\n  transform: translate(-50%);\n  z-index: 1;\n`;\n\nconst ThirdRect = styled.div`\n  position: absolute;\n  width: 60vw;\n  max-width: 650px;\n  height: 40vh;\n  max-height: 250px;\n  border-radius: 20px;\n  background-color: #373737;\n  opacity: 20%;\n  top: calc(50px + 5vh);\n  left: 50%;\n  transform: translate(-50%);\n`;\n\nconst ResultLabel = styled.label`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  white-space: pre-wrap;\n  transform: translate(-50%, -50%);\n  color: white;\n  font-size: 1.5vw;\n  font-weight: bold;\n  z-index: 3;\n  width: 70%;\n  text-align: center;\n`;\n\nconst ResetButton = styled.button`\n  position: absolute;\n  left: 50%;\n  top: 75%;\n  transform: translate(-50%);\n  width: 100px;\n  height: 50px;\n  border-radius: 15px;\n  background-color: #333333;\n  font-size: 20px;\n  color: white;\n  z-index: 3;\n  cursor: pointer;\n  outline: none;\n  border-width: 0;\n\n  transition: background-color .2s;\n\n  :hover {\n    background-color: #4A56E2;\n  }\n`;\n\nconst RectBackground = styled.div`\n  height: 100%;\n  width: 100%;\n  border-radius: 20px;\n  background: ${props => props.background} no-repeat center;\n  background-size: contain;\n  transition: background .5s;\n`;\n\nclass ResultDisplay extends React.Component {\n\tconstructor(props) {\n    super(props);\n  }\n\n  render() {\n    let result = this.props.mainResult || 'Please input your readings';\n    return (\n      <Container>\n        <FirstRect>\n          <RectBackground background={this.props.background}/>\n          <ResultLabel>\n            {result}\n          </ResultLabel>\n          {this.props.mainResult &&\n            <ResetButton onClick={this.props.handleReset}>\n              Reset\n            </ResetButton>\n          }\n        </FirstRect>\n        <SecondRect />\n        <ThirdRect />\n      </Container>\n    );\n  }\n}\n\nexport default ResultDisplay;","import React from 'react';\nimport styled from 'styled-components';\n\nimport ResultDisplay from './ResultDisplay';\n\nimport typhoidImg from '../../assets/LSK-glucose-meter-coding-logic-12.png';\nimport drugImg from '../../assets/LSK-glucose-meter-coding-logic-11.png';\nimport typhoidDrugImg from '../../assets/LSK-glucose-meter-coding-logic-13.png';\n\n\nconst StyleMainApp = styled.div`\n  height: 75vh;\n  width: 100%;\n  position: relative;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Container = styled.div`\n  position: relative;\n  wdith: 32vw;\n  height: 100%;\n  left: 8vw;\n`;\n\nconst Title = styled.div`\n  position: relative;\n  margin-top: 50px;\n  font-size: 28px;\n  font-color: #333333;\n  font-weight: bold;\n`;\n\nconst InputDiv = styled.div`\n  margin-top: 20px;\n`;\n\nconst InputTitle = styled.label`\n  display: block;\n  color: #707070;\n  font-size: 20px;\n  font-weight: bold;\n`;\n\nconst InputUnit = styled.label`\n  display: inline-block;\n  color: #707070;\n  font-size: 20px;\n  margin-left: 15px;\n`;\n\nconst Input = styled.input`\n  width: 130px;\n  height: 35px;\n  border-radius: 10px;\n  border-width: 2px;\n  border-color: #333333;\n  margin-top: 15px;\n  font-size: 20px;\n  outline: none;\n`;\n\nconst Submit = styled.button`\n  border-width: 0;\n  background-color: #333333;\n  font-size: 25px;\n  color: white;\n  margin-top: 40px;\n  height: 45px;\n  width: 130px;\n  cursor: pointer;\n  outline: none;\n\n  transition: background-color .2s;\n\n  :hover {\n    background-color: #4A56E2;\n  }\n`;\n\nclass MainApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      blank: 0,\n      sample: 0,\n      mainResult: '',\n      instruction: '',\n      background: '#333333'\n    };\n  }\n\n  handleBlankChange = (e) => {\n    this.setState({blank: e.target.value});\n  }\n\n  handleSampleChange = (e) => {\n    this.setState({sample: e.target.value});\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let {blank, sample} = this.state;\n    if ((!sample || sample == 0) && (!blank || blank == 0)) {\n      return;\n    }\n    if (!sample || sample == 0) {\n      if (blank >= 103 && blank <= 134) {\n        this.setState({mainResult: 'Negative Result', background: '#04cc9c'});\n      }\n      else {\n        this.setState({\n          mainResult: 'Internal Control Failed',\n          instruction: 'Error',\n          background: '#ff7a89'\n        });\n      }\n    }\n    else {\n      if (sample >= 103 && sample <= 134) {\n        this.setState({mainResult: 'Negative Result', background: '#04cc9c'});\n      }\n      else if (sample >= 141 && sample <= 157) {\n        this.setState({mainResult: 'Typhoid', background: 'url(\\'' + typhoidImg + '\\')'});\n      }\n      else if (sample >= 174 && sample <= 192) {\n        this.setState({mainResult: 'Fluoroquinolone \\nResistance\\n(No typhoid)', background: 'url(\\'' + drugImg + '\\')'});\n      }\n      else if (sample >= 210 && sample <= 264) {\n        this.setState({mainResult: 'Typhoid &\\nFluoroquinolone \\nResistance', background: 'url(\\'' + typhoidDrugImg + '\\')'});\n      }\n      else {\n        this.setState({mainResult: 'Inconclusive',\n          instruction: 'Please read the sample again', background: '#ff7a89'});\n      }\n    }\n  }\n\n  handleReset = () => {\n    this.setState({blank: 0, sample: 0, mainResult: '', background: '#333333'});\n  }\n\n\trender() {\n    let {mainResult, instruction, background, blank, sample} = this.state;\n    return (\n      <StyleMainApp>\n        <Container>\n          <form onSubmit={this.handelSubmit}>\n            <Title>\n              Glucose Level\n            </Title>\n            <InputDiv>\n              <InputTitle>\n                Reading on Blank:\n              </InputTitle>\n              <Input type='number' value={blank} onChange={this.handleBlankChange}/>\n              <InputUnit>\n                mg/dL\n              </InputUnit>\n            </InputDiv>\n            <InputDiv>\n              <InputTitle>\n                Reading on Sample:\n              </InputTitle>\n              <Input type='number' value={sample} onChange={this.handleSampleChange}/>\n              <InputUnit>\n                mg/dL\n              </InputUnit>\n            </InputDiv>\n            <Submit onClick={this.handleSubmit}>\n              Submit\n            </Submit>\n          </form>\n        </Container>\n        <ResultDisplay \n          mainResult={mainResult} \n          instruction={instruction} \n          background={background}\n          handleReset={this.handleReset}\n        />\n      </StyleMainApp>\n    );\n  }\n}\n\nexport default MainApp;","import React from 'react';\nimport Banner from './components/Banner';\nimport MainApp from './components/MainApp';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Banner />\n      <MainApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}